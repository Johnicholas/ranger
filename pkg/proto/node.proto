syntax = "proto3";

option go_package = "github.com/adammck/ranger/pkg/proto";

import "ident.proto";

package ranger;

message Range {
  // Unique for every range.
  Ident ident = 1;

  // Range of the keys in this range.
  bytes start = 2; // inclusive
  bytes end = 3; // exclusive
}

message RangeNode {
  Range range = 1;
  string node = 2;
}

message RangeInfo {
  Range range = 1;

  // Keep synced with RangeState (in node.go for now)
  enum State {
    UNKNOWN = 0;
    FETCHING = 1;
    FETCHED = 2;
    FETCH_FAILED = 3;
    READY = 4;
    TAKEN = 5;
  }

  // The state which the range is currently in.
  State state = 2;

  // Number of keys which this range contains.
  // Just for reporting? Not balancing?
  uint64 keys = 3;

  // TODO: Generic load info? cpu/ram/network/disk?
  // TODO: Extra domain-specific info?
  // TODO: Suggested split point(s)
}

service Node {
  rpc Give (GiveRequest) returns (GiveResponse) {}
  rpc Serve (ServeRequest) returns (ServeResponse) {}
  rpc Take (TakeRequest) returns (TakeResponse) {}
  rpc Drop (DropRequest) returns (DropResponse) {}
  rpc Info (InfoRequest) returns (InfoResponse) {}
}

message GiveRequest {
  Range range = 1;

  // The range(s) which this range was created from, and the nodes where they
  // can currently be found. This is empty is the range is brand new. Nodes may
  // use this info to restore the current state of the range when accepting it.
  repeated RangeNode parents = 3;
}

message GiveResponse {
}

message ServeRequest {
  Ident range = 1;
  bool force = 2;
}

message ServeResponse {
}

message TakeRequest {
  Ident range = 1;
}

message TakeResponse {
}

message DropRequest {
  Ident range = 1;
  bool force = 2;
}

message DropResponse {
}

message InfoRequest {
}

message InfoResponse {
  repeated RangeInfo ranges = 1;
}