syntax = "proto3";

option go_package = "github.com/adammck/ranger/pkg/proto";

import "ranje.proto";

package ranger;

message RangeInfo {
  RangeMeta meta = 1;

  // The state which the range is currently in, according to the node.
  RangeNodeState state = 2;

  // Number of keys which this range contains.
  // Just for reporting? Not balancing?
  uint64 keys = 3;

  // TODO: Generic load info? cpu/ram/network/disk?
  // TODO: Extra domain-specific info?
  // TODO: Suggested split point(s)
}

service Node {
  rpc Give (GiveRequest) returns (GiveResponse) {}
  rpc Serve (ServeRequest) returns (ServeResponse) {}
  rpc Take (TakeRequest) returns (TakeResponse) {}
  rpc Untake (UntakeRequest) returns (UntakeResponse) {}
  rpc Drop (DropRequest) returns (DropResponse) {}

  // Controller wants to know the state of the node, including its ranges.
  // Proxy shouldn't call this; use Ranges instead.
  rpc Info (InfoRequest) returns (InfoResponse) {}

  // Proxy wants to know what it can forward to this node.
  // Controller shouldn't call this; use Info instead.
  rpc Ranges (RangesRequest) returns (RangesResponse) {}
}

message GiveRequest {
  RangeMeta range = 1;

  // TODO: Should include the placement index in here, so the node can verify
  //       that the controller is talking about the same placement when it sees
  //       duplicates. Just in case the controller has gone mad and is trying
  //       to place multiple replicas of the same range on a single node.

  // The range(s) which this range was created from, and the nodes where they
  // can currently be found. This is empty is the range is brand new. Nodes may
  // use this info to restore the current state of the range when accepting it.
  // TODO: Need nested parents here?
  repeated Placement parents = 3;
}

message GiveResponse {
  // TODO: Return just the state instead, like ServeResponse.
  RangeInfo range_info = 1;
}

message ServeRequest {
  uint64 range = 1;
  bool force = 2;
}

message ServeResponse {
  RangeNodeState state = 1;
}

message TakeRequest {
  uint64 range = 1;
}

message TakeResponse {
  RangeNodeState state = 1;
}

message UntakeRequest {
  uint64 range = 1;
}

message UntakeResponse {
}

message DropRequest {
  uint64 range = 1;
  bool force = 2;
}

message DropResponse {
  RangeNodeState state = 1;
}

message InfoRequest {
}

message InfoResponse {
  repeated RangeInfo ranges = 1;

  // The nod wants the controller to remove all ranges from it. Probably because
  // it wants to shut down gracefully.
  bool wantDrain = 2;
}

message RangesRequest {
  // The requests that the proxy is interested in forwarding. Nodes may filter
  // out ranges which aren't currently in a state that can serve requests not
  // in this list. E.g. for the kv example, can't accept writes after Take.
  repeated string symbols = 1;
}

// This is like a short version of RangeInfo.
message RangeMetaState {
  RangeMeta meta = 1;
  RangeNodeState state = 2;
}

message RangesResponse {
  repeated RangeMetaState ranges = 1;
}
